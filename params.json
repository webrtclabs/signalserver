{"name":"Signalserver for webrtc over node","tagline":"websockets signal server for webrtc based video chats","body":"#### [WebSocket over Node.js](https://github.com/webrtclabs/signalserver/) / [Demo](https://www.quickstreamhost.com)\r\n\r\nThis experiment is using **WebSocket over Node.js** for signaling.\r\n\r\n=\r\n\r\n#### Install via `npm`\r\n\r\n```\r\nnpm install websocket-over-nodejs\r\n```\r\n\r\nand run the `signaler.js` nodejs file:\r\n\r\n```\r\nnode node_modules/websocket-over-nodejs/signaler.js\r\n```\r\n\r\n=\r\n\r\nOtherwise, follow these steps:\r\n\r\n1. Download and extract [**ZIP file**](https://github.com/webrtclabs/signalserver/archive/master.zip) of this repository then copy `folder-location`.\r\n2. Open **Node.js command prompt**.\r\n3. Type command `cd folder-location` where `folder-location` can be `C:\\websocket-over-nodejs`.\r\n4. Type `node signaler` to run the node.js server.\r\n\r\nOK, now you can listen websocket URL like this:\r\n\r\n```javascript\r\nvar websocket = new WebSocket('ws://localhost:8888/');\r\n```\r\n\r\n=\r\n\r\n#### If you want to deploy your application\r\n\r\nFirst of all; change **subdomain** in the `package.json` file:\r\n\r\n```\r\n{\r\n  \"name\": \"just-a-name\",\r\n  \"subdomain\": \"must-be-unique\",\r\n  \"scripts\": {\r\n    \"start\": \"signaler.js\"\r\n  },\r\n  \"version\": \"0.0.0\",\r\n  \"engines\": {\r\n    \"node\": \"0.10.x\"\r\n  },\r\n  \"dependencies\": {\r\n    \"websocket\": \"1.0.x\"\r\n  }\r\n}\r\n```\r\n\r\n1. Create an account at `nodejitsu`\r\n2. Use same **Node.js command prompt** window\r\n3. Type `jitsu deploy` \r\n\r\nand you're done!\r\n\r\n**Remember:** `jitsu deploy` command will deploy the entire directory containing all all files including `node_modules` (i.e. dependencies).\r\n\r\nNow, you can listen your nodejitsu server like this:\r\n\r\n```javascript\r\n// Remember, must include port \"80\"!\r\nvar websocket = new WebSocket('ws://subdomain.jit.su:80');\r\n```\r\n\r\n=\r\n\r\n#### How to use?\r\n\r\nIn `ui.js` files you can find `openSocket` method; or in all libraries; you can find `openSignalingChannel` method.\r\n\r\n```javascript\r\n// ws://wsnodejs.jit.su:80\r\n\r\n\r\nvar SIGNALING_SERVER = 'ws://' + document.domain + ':1338/';\r\nconnection.openSignalingChannel = function(config) {\r\n    config.channel = config.channel || this.channel || 'default-channel';\r\n    var websocket = new WebSocket(SIGNALING_SERVER);\r\n    websocket.channel = config.channel;\r\n    websocket.onopen = function() {\r\n        websocket.push(JSON.stringify({\r\n            open: true,\r\n            channel: config.channel\r\n        }));\r\n        if (config.callback)\r\n            config.callback(websocket);\r\n    };\r\n    websocket.onmessage = function(event) {\r\n        config.onmessage(JSON.parse(event.data));\r\n    };\r\n    websocket.push = websocket.send;\r\n    websocket.send = function(data) {\r\n        websocket.push(JSON.stringify({\r\n            data: data,\r\n            channel: config.channel\r\n        }));\r\n    };\r\n}\r\n```\r\n\r\n=\r\n\r\n#### Signaling Concepts\r\n\r\nInterested to understand WebRTC Signaling Concepts? Read [this document](http://quickstreamhost.com/signalserver).\r\n\r\n=\r\n\r\n#### License\r\n\r\nMIT. Copyright (c) 2014 [webrtclabs](https://quickstreamhost.com).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}